<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jvm系列-第2篇【类加载子系统】</title>
      <link href="/posts/9bbea6db.html"/>
      <url>/posts/9bbea6db.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-类加载子系统"><a href="#2-类加载子系统" class="headerlink" title="2.类加载子系统"></a>2.类加载子系统</h1><h2 id="2-1类加载系统的位置"><a href="#2-1类加载系统的位置" class="headerlink" title="2.1类加载系统的位置"></a>2.1类加载系统的位置</h2><p>好的~我们接下来就要学习类加载子系统的知识了，冲冲冲！！</p><p>首先我们回顾看一下<code>类加载子系统</code>在jvm中的位置。</p><p><img src="../images/jvm/jvm-1-jvm%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg"></p><h2 id="2-2类加载器的作用"><a href="#2-2类加载器的作用" class="headerlink" title="2.2类加载器的作用"></a>2.2类加载器的作用</h2><ul><li>类加载子系统负责从文件系统或者网络中<code>加载Clas文件</code>,class文件在文件开头有特定的文件标识（后面会讲到，这个被称为“魔术”）。</li><li>classLoader只负责class文件的加载，至于它是否可以运行，则由ExecutionEngine决定。</li><li>加载的类信息存放于一块称为<code>方法区</code>的内存空间。（方法区也是后面一个重点，我们后面会慢慢介绍）</li></ul><p><img src="../images/jvm/jvm-2-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E8%A7%92%E8%89%B2.jpg"></p><h2 id="2-3类加载器系统的执行流程"><a href="#2-3类加载器系统的执行流程" class="headerlink" title="2.3类加载器系统的执行流程"></a>2.3类加载器系统的执行流程</h2><p><img src="../images/jvm/jvm-2-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg"></p><ol><li><p>类加载系统的<code>加载</code>过程</p><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的<code>java.lang.class对象</code>作为方法区这个类的各种数据的访问入口</li></ol></li><li><p>类加载系统的<code>链接</code>过程</p><p><img src="../images/jvm/jvm-2-%E9%93%BE%E6%8E%A5%E8%BF%87%E7%A8%8B.jpg"></p></li><li><p>类加载系统的初始化过程</p><p><img src="../images/jvm/jvm-2-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B.jpg"></p></li></ol><h2 id="2-4类加载器的分类"><a href="#2-4类加载器的分类" class="headerlink" title="2.4类加载器的分类"></a>2.4类加载器的分类</h2><p>JVM有两种类型的加载器：引导类加载器和自定义类加载器</p><p>Bootstrap Class Loader 是引导类加载器，其余的都是自定义类加载器</p><h3 id="2-4-1启动类加载器"><a href="#2-4-1启动类加载器" class="headerlink" title="2.4.1启动类加载器"></a>2.4.1启动类加载器</h3><p><img src="../images/jvm/jvm-2-%E5%BC%95%E5%AF%BC%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.jpg"></p><h3 id="2-4-2扩展类加载器"><a href="#2-4-2扩展类加载器" class="headerlink" title="2.4.2扩展类加载器"></a>2.4.2扩展类加载器</h3><p><img src="../images/jvm/jvm-2-%E6%89%A9%E5%B1%95%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.jpg"></p><h3 id="2-4-3应用程序类加载器"><a href="#2-4-3应用程序类加载器" class="headerlink" title="2.4.3应用程序类加载器"></a>2.4.3应用程序类加载器</h3><p><img src="../images/jvm/jvm-2-%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.jpg"></p><h3 id="2-4-4自定义类加载器"><a href="#2-4-4自定义类加载器" class="headerlink" title="2.4.4自定义类加载器"></a>2.4.4自定义类加载器</h3><p>我们平时开发中，类加载几乎都是上面3种类加载器配合使用的，那我们为什么还需要使用自定义类加载器呢？</p><ul><li>防止加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><p>问：关于如何编写自定义类加载器呢？</p><p>答：我们可以直接继承URLClassLoader类</p><p>【注：本教程旨在互相学习，有借鉴搬移其他平台（比如尚硅谷）的成分，不为盈利（bilbil尚硅谷确实很好）】</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在idea中以Typora打开.md文件的方法</title>
      <link href="/posts/2e40f549.html"/>
      <url>/posts/2e40f549.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写博客的时候使用idea自带的.md书写模式感觉好怪，所以我寻找了一下如何在idea中以Typora打开以.md结尾的文件。</p></blockquote><p><img src="https://markdown-1258124344.cos.ap-guangzhou.myqcloud.com/%20image/image-20220117192840798.png"></p><p>这样idea就会以系统默认的方式打开.md文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring系列-第1篇【手写部分spring源码】</title>
      <link href="/posts/d882f8af.html"/>
      <url>/posts/d882f8af.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>moon<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token comment">/** * @author MoonLeaves * @create 2022-04-05 13:37 * @describe:这是spring容器，作为一个容器，是用来存放创建的对象仓库 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Introspector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token comment">/** * ComponentScan,Component方面联系: * 作为一个仓库，他是利用component去判定哪一个是要被创建的对象，所以他必须和component有关系，即找到扫描路径 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoonApplicationContext</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> CONSTANT_SCOPE_NAME_SINGLETON <span class="token operator">=</span> <span class="token string">"singleton"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> CONSTANT_SCOPE_NAME_PROPERTY <span class="token operator">=</span> <span class="token string">"property"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> configClass<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">&gt;</span></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//单例池</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断出一个Component之后就判断这个clazz是否有BeanPostProcessor接口</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">&gt;</span></span> beanPostProcessorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 这个构造方法就是接受到一个配置类，然后判断是否是ComponentScan注解     * 如果有ComponentScan注解:     * 1.就根据ComponentScan的value找到要扫描的包com.moon.service【这一步运用了classLoader.getResource得到；文件在项目中的绝对路径】     * 2.然后拿到包内的所有文件，筛选出class结尾的文件     * 3.遍历：然后去所有的class文件中去遍历所有标注了Component注解的文件     * 4.有Component注解的类就是我们想要的鉴定的类     * 5.我们用一个包装bean对象( BeanDefinition )去封装原始类，     * 6.需要封装的其实就是这个类的Class属性和scope.value     * 7.遍历之后：所以要把他存起来，ConcurrentHashMap&lt;String, BeanDefinition&gt;，存放的是bean名字和bean封装对象(Class,scope)     * &lt;p&gt;     * 8.按说遍历之后就已经结束了，但是spring绝对在容器创建成功之后，直接把单例模式的bean创建一下所以     * 9.创建单例bean对象,创建bean对象用的是一个private类型的createBean()     * 10.为了创建单例对象，我们先设计一个单例池ConcurrentHashMap&lt;String, Object&gt;     * 11.每次创建成功单例bean对象，就把这个对象放到单例池中.     * 12.我们对外开启的getBean()方法就从这个池子里拿取     *     * @param configClass     */</span>    <span class="token comment">/**     * 关于依赖注入：     * &lt;p&gt;     * 前面我们完成了容器的创建，找到了bean,然后创建bean,但是我们创建还没有完成，因为没有解决依赖注入的方法。     * 依赖注入就是要求在创建bean对象之后就把值给赋了，所以     * 在Object instance = clazz.getConstructor().newInstance();执行之后就先要遍历他的属性，然后看看是否有Autowired注解，如果有     * 就证明这个属性也是通过spring去创建的，所以我们调用 f.set(instance, getBean(f.getName()));去创建对象。【注意这里有个A.B问题】     * &lt;p&gt;     * &lt;p&gt;     * &lt;p&gt;     * 关于回调机制和初始化机制：     * &lt;p&gt;     * 因为我们借助的是两个接口（BeanNameAware，InitializingBean）去判断他是否有这个操作，在createdBean内，我们就要判断是否有这个注解，然后去操作     * &lt;p&gt;     * &lt;p&gt;     * &lt;p&gt;     * 关于AOP机制：     * &lt;p&gt;     * 我们也是需要一个接口BeanPostProcessor，在判断出他是一个component之后，就判断他是否有BeanPostProcessor接口，如果有就添加到一个池子里beanPostProcessorList，方便以后使用     * 在我们进行完回调和初始化机制之后，我们就可以执行BeanPostProcessor的前置方法了     */</span>    <span class="token keyword">public</span> <span class="token class-name">MoonApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Class</span> configClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> configClass<span class="token punctuation">;</span>        <span class="token comment">//判断是否有ComponentScan注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果有就获取到这个ComponentScan注解类对象</span>            <span class="token class-name">ComponentScan</span> <span class="token class-name">ComponentScanAnnotation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">)</span> configClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//所以这就是ComponentScan的扫描路径，其实一个包名com.moon.service</span>            <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">ComponentScanAnnotation</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//com.moon.service---&gt;com/moon/service</span>            path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//tips:我们根据classpath去获取真正的路径名</span>            <span class="token comment">//获取容器的类加载器</span>            <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">MoonApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//根据类加载器能得到资源</span>            <span class="token class-name">URL</span> resource <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//此时获取到的file路径就是我们想要的</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//D:\Study\Code\Study\Spring\SpringSourceCode\SpringSourceCode_01\target\classes\com\moon\service</span><span class="token comment">//            System.out.println(file);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//获取到文件夹内所有的文件</span>                <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> filename <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取到所有的文件名 D:\Study\Code\Study\Spring\SpringSourceCode\SpringSourceCode_01\target\classes\com\moon\service\UserService.class</span><span class="token comment">//                    System.out.println(filename);</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//     com\moon\service\UserService</span>                        <span class="token class-name">String</span> className <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//     com.moon.service.UserService</span>                        className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                        System.out.println(className);</span>                        <span class="token comment">//使用类加载器，传入类的全限定名加载类</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token comment">//使用类加载器加载类</span>                            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//如果有Component注解,就证明这个是bean对象</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment">//判断这个类是否是实现了BeanPostProcessor接口</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token class-name">BeanPostProcessor</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    beanPostProcessorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token class-name">Component</span> component <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Component</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//获取bean的名字</span>                                <span class="token class-name">String</span> beanName <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//spring要求生成的bean名字首字母要小写</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    beanName <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token comment">//这个是包装bean类型</span>                                <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//设置包装bean类型的类</span>                                beanDefinition<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//然后判断是否这个类是否有scope注解</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token class-name">Scope</span> scopeAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Scope</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//这个类的scope值</span>                                    beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>CONSTANT_SCOPE_NAME_SINGLETON<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token comment">//向集合中中添加bean</span>                                beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CONSTANT_SCOPE_NAME_SINGLETON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//创建单例bean</span>                <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 1.根据beanName得到类在哪里         * 2.判断是否是单例bean         */</span>        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> scope <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果是单例模式</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>CONSTANT_SCOPE_NAME_SINGLETON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//我们从单例池中获取，单例池内的数据是在容器创建完成后就添加的</span>                <span class="token class-name">Object</span> bean <span class="token operator">=</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//有一种情形，就是A.B  如果要创建A,而A引用了B，但是A先被扫描到了，B还有创建，所以就创建B</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                    singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//多例模式</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//当前bean对应的类</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用无参构造方法生成一个bean</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//给一个bean依赖注入，首先要遍历一个bean的属性</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Autowired</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//f.getName()找的就是OrderService orderService中的 orderService</span>                    <span class="token comment">//A.B 此时就先去创建B</span>                    f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">getBean</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment">//如果当前类实现了BeanNameAware接口</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//回调机制，直接自己干事</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//初始化机制，只用于调用，但是具体做了什么事情，用户才知道，调用的是用户的方法</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm系列-第1篇【jvm基本结构】</title>
      <link href="/posts/15bc6d90.html"/>
      <url>/posts/15bc6d90.html</url>
      
        <content type="html"><![CDATA[<h1 id="jvm系列-第1篇【jvm基本结构】"><a href="#jvm系列-第1篇【jvm基本结构】" class="headerlink" title="jvm系列-第1篇【jvm基本结构】"></a>jvm系列-第1篇【jvm基本结构】</h1><h2 id="1-jvm是什么？"><a href="#1-jvm是什么？" class="headerlink" title="1.jvm是什么？"></a>1.jvm是什么？</h2><p>JVM是java虚拟机（Java Virtual Machine）的英文简称。</p><p>​    虚拟机是一种抽象化的计算机，通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java虚拟机屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p><blockquote><p>简单来说JVM是用来解析和运行Java程序的。</p></blockquote><p>大家都知道Java是跨平台的语言，这都要归功于java虚拟机，即jvm的作用。为了让大家更好理解jvm的跨平台性，这里贴一张图。</p><p><img src="../images/jvm/jvm-1-jvm%E8%B7%A8%E5%B9%B3%E5%8F%B0.jpg"></p><p>Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码==（字节码）==，就可以在多种平台上不加修改地运行。最终实现一次编译，到处执行。</p><p>那么jvm在那里呢？</p><p><img src="../images/jvm/jvm-1-jvm%E7%9A%84%E4%BD%8D%E7%BD%AE.jpg"></p><p>​    用户使用编译器（javac指令）编译出字节码文件【tips:1】。然后只要你的电脑里安装了jre【tips:2】，就可以运行这个字节码文件了。</p><p>tips1:【idea这种是编辑器，他可以使用快捷的使用javac编译出字节码文件】</p><p>tips2:【我们安装的jdk（开发工具包）已经包括了jre(运行环境)】</p><p><img src="../images/jvm/jvm-1-jdk%E4%B8%8Ejre.jpg"></p><p>【JRE包括JVM,JDK包括JRE,IDEA使用JDK】</p><p>好了，我们要学习的重点只是就是os上，jre下的JVM，鼎鼎大名的==JVM虚拟机==！！</p><h2 id="2-jvm包括什么？"><a href="#2-jvm包括什么？" class="headerlink" title="2.jvm包括什么？"></a>2.jvm包括什么？</h2><p>jvm其实很复杂，这里先给大家展示一下他的简略结构图</p><p><img src="../images/jvm/jvm-1-jvm%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E7%AE%80%E6%B4%81%E7%89%88.jpg"></p><p>看图我们知道，jvm有以下几个部分：</p><ol><li>类加载子系统</li><li>运行时数据区【方法区，堆，java栈，本地方法栈，程序计数器】</li><li>执行引擎</li><li>本地方法接口</li><li>本地方法库</li></ol><p>​    前面说过，我们是通过编译器编译出==字节码文件==，然后给jvm的，所以我们看这个图可以发现，jvm的初始入口就是从字节码文件开始的。</p><p>我们将这个图稍微细化一些。<br><img src="../images/jvm/jvm-1-jvm%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.jpg"></p><p>同学们，不要慌。我们接下来将会对这里面的结构进行拆块的剖析。</p><p>【注：本教程旨在互相学习，有借鉴搬移其他平台（比如尚硅谷）的成分，不为盈利（bilbil尚硅谷确实很好）】</p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java面试系列-第1篇【java基础】</title>
      <link href="/posts/96ab36bf.html"/>
      <url>/posts/96ab36bf.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> java面试 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
